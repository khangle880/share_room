// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: categories.sql

package pg

import (
	"context"

	"github.com/google/uuid"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (name, type, icon_id, parent_id)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at, name, type, icon_id, parent_id
`

type CreateCategoryParams struct {
	Name     string        `json:"name"`
	Type     CategoryType  `json:"type"`
	IconID   uuid.UUID     `json:"icon_id"`
	ParentID uuid.NullUUID `json:"parent_id"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory,
		arg.Name,
		arg.Type,
		arg.IconID,
		arg.ParentID,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Type,
		&i.IconID,
		&i.ParentID,
	)
	return i, err
}

const getCategories = `-- name: GetCategories :many
SELECT id, created_at, updated_at, name, type, icon_id, parent_id FROM categories
OFFSET $1
LIMIT $2
`

type GetCategoriesParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) GetCategories(ctx context.Context, arg GetCategoriesParams) ([]Category, error) {
	rows, err := q.db.Query(ctx, getCategories, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Type,
			&i.IconID,
			&i.ParentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoriesByIDs = `-- name: GetCategoriesByIDs :many
SELECT id, created_at, updated_at, name, type, icon_id, parent_id FROM categories WHERE id = ANY($1::UUID[])
`

func (q *Queries) GetCategoriesByIDs(ctx context.Context, dollar_1 []uuid.UUID) ([]Category, error) {
	rows, err := q.db.Query(ctx, getCategoriesByIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Type,
			&i.IconID,
			&i.ParentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT id, created_at, updated_at, name, type, icon_id, parent_id FROM categories WHERE id = $1
`

func (q *Queries) GetCategoryByID(ctx context.Context, id uuid.UUID) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryByID, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Type,
		&i.IconID,
		&i.ParentID,
	)
	return i, err
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET updated_at = NOW(),
    name = COALESCE($2, name),
    type = COALESCE($3, type),
    icon_id = COALESCE($4, icon_id),
    parent_id = COALESCE($5, parent_id)
WHERE id = $1
RETURNING id, created_at, updated_at, name, type, icon_id, parent_id
`

type UpdateCategoryParams struct {
	ID       uuid.UUID        `json:"id"`
	Name     *string          `json:"name"`
	Type     NullCategoryType `json:"type"`
	IconID   uuid.NullUUID    `json:"icon_id"`
	ParentID uuid.NullUUID    `json:"parent_id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory,
		arg.ID,
		arg.Name,
		arg.Type,
		arg.IconID,
		arg.ParentID,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Type,
		&i.IconID,
		&i.ParentID,
	)
	return i, err
}
