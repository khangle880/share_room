// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: profiles.sql

package pg

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profiles (role, firstname, lastname, dob, bio, avatar)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, role, firstname, lastname, dob, bio, avatar
`

type CreateProfileParams struct {
	Role      UserRole  `json:"role"`
	Firstname *string   `json:"firstname"`
	Lastname  *string   `json:"lastname"`
	Dob       time.Time `json:"dob"`
	Bio       *string   `json:"bio"`
	Avatar    *string   `json:"avatar"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRow(ctx, createProfile,
		arg.Role,
		arg.Firstname,
		arg.Lastname,
		arg.Dob,
		arg.Bio,
		arg.Avatar,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Role,
		&i.Firstname,
		&i.Lastname,
		&i.Dob,
		&i.Bio,
		&i.Avatar,
	)
	return i, err
}

const getProfileByUserID = `-- name: GetProfileByUserID :one
SELECT p.id, p.created_at, p.updated_at, p.role, p.firstname, p.lastname, p.dob, p.bio, p.avatar
FROM profiles p
JOIN user_profiles up ON p.id = up.profile_id
JOIN users u ON up.user_id = u.id
WHERE u.id = $1
`

func (q *Queries) GetProfileByUserID(ctx context.Context, id uuid.UUID) (Profile, error) {
	row := q.db.QueryRow(ctx, getProfileByUserID, id)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Role,
		&i.Firstname,
		&i.Lastname,
		&i.Dob,
		&i.Bio,
		&i.Avatar,
	)
	return i, err
}

const getProfilesByUserIDs = `-- name: GetProfilesByUserIDs :many
SELECT p.id, p.created_at, p.updated_at, p.role, p.firstname, p.lastname, p.dob, p.bio, p.avatar
FROM profiles p
INNER JOIN user_profiles up ON p.id = up.profile_id
WHERE up.user_id = ANY($1::UUID[])
`

func (q *Queries) GetProfilesByUserIDs(ctx context.Context, dollar_1 []uuid.UUID) ([]Profile, error) {
	rows, err := q.db.Query(ctx, getProfilesByUserIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Profile{}
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Role,
			&i.Firstname,
			&i.Lastname,
			&i.Dob,
			&i.Bio,
			&i.Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProfile = `-- name: UpdateProfile :one
UPDATE profiles
SET updated_at = NOW(),
    role = COALESCE($2, role),
    firstname = COALESCE($3, firstname),
    lastname = COALESCE($4, lastname),
    dob = COALESCE($5, dob),
    bio = COALESCE($6, bio),
    avatar = COALESCE($7, avatar)
WHERE id = $1
RETURNING id, created_at, updated_at, role, firstname, lastname, dob, bio, avatar
`

type UpdateProfileParams struct {
	ID        uuid.UUID    `json:"id"`
	Role      NullUserRole `json:"role"`
	Firstname *string      `json:"firstname"`
	Lastname  *string      `json:"lastname"`
	Dob       *time.Time   `json:"dob"`
	Bio       *string      `json:"bio"`
	Avatar    *string      `json:"avatar"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (Profile, error) {
	row := q.db.QueryRow(ctx, updateProfile,
		arg.ID,
		arg.Role,
		arg.Firstname,
		arg.Lastname,
		arg.Dob,
		arg.Bio,
		arg.Avatar,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Role,
		&i.Firstname,
		&i.Lastname,
		&i.Dob,
		&i.Bio,
		&i.Avatar,
	)
	return i, err
}
