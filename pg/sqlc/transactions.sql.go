// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: transactions.sql

package pg

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (category_id, budget_id, event_id, exc_time, description, amount, images)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, created_at, updated_at, category_id, budget_id, event_id, exc_time, description, amount, images
`

type CreateTransactionParams struct {
	CategoryID  uuid.UUID      `json:"category_id"`
	BudgetID    uuid.NullUUID  `json:"budget_id"`
	EventID     uuid.NullUUID  `json:"event_id"`
	ExcTime     time.Time      `json:"exc_time"`
	Description *string        `json:"description"`
	Amount      pgtype.Numeric `json:"amount"`
	Images      []string       `json:"images"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.CategoryID,
		arg.BudgetID,
		arg.EventID,
		arg.ExcTime,
		arg.Description,
		arg.Amount,
		arg.Images,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CategoryID,
		&i.BudgetID,
		&i.EventID,
		&i.ExcTime,
		&i.Description,
		&i.Amount,
		&i.Images,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions WHERE id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTransaction, id)
	return err
}

const getMembersByTranIDs = `-- name: GetMembersByTranIDs :many
SELECT u.id, u.created_at, u.updated_at, u.deleted_at, u.last_join_at, u.username, u.hashed_password, u.email, u.phone, tm.transaction_id
FROM users u
INNER JOIN transaction_members tm ON u.id = tm.user_id
WHERE tm.room_id = ANY($1::UUID[]) AND tm.role = $2
`

type GetMembersByTranIDsParams struct {
	Column1 []uuid.UUID `json:"column_1"`
	Role    TransRole   `json:"role"`
}

type GetMembersByTranIDsRow struct {
	User          User      `json:"user"`
	TransactionID uuid.UUID `json:"transaction_id"`
}

func (q *Queries) GetMembersByTranIDs(ctx context.Context, arg GetMembersByTranIDsParams) ([]GetMembersByTranIDsRow, error) {
	rows, err := q.db.Query(ctx, getMembersByTranIDs, arg.Column1, arg.Role)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMembersByTranIDsRow{}
	for rows.Next() {
		var i GetMembersByTranIDsRow
		if err := rows.Scan(
			&i.User.ID,
			&i.User.CreatedAt,
			&i.User.UpdatedAt,
			&i.User.DeletedAt,
			&i.User.LastJoinAt,
			&i.User.Username,
			&i.User.HashedPassword,
			&i.User.Email,
			&i.User.Phone,
			&i.TransactionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransByBudgetIDs = `-- name: GetTransByBudgetIDs :many
SELECT id, created_at, updated_at, category_id, budget_id, event_id, exc_time, description, amount, images FROM transactions WHERE budget_id = ANY($1::UUID[])
`

func (q *Queries) GetTransByBudgetIDs(ctx context.Context, dollar_1 []uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getTransByBudgetIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CategoryID,
			&i.BudgetID,
			&i.EventID,
			&i.ExcTime,
			&i.Description,
			&i.Amount,
			&i.Images,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionByID = `-- name: GetTransactionByID :one
SELECT id, created_at, updated_at, category_id, budget_id, event_id, exc_time, description, amount, images FROM transactions WHERE id = $1
`

func (q *Queries) GetTransactionByID(ctx context.Context, id uuid.UUID) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransactionByID, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CategoryID,
		&i.BudgetID,
		&i.EventID,
		&i.ExcTime,
		&i.Description,
		&i.Amount,
		&i.Images,
	)
	return i, err
}

const getTransactions = `-- name: GetTransactions :many
SELECT id, created_at, updated_at, category_id, budget_id, event_id, exc_time, description, amount, images FROM transactions
OFFSET $1
LIMIT $2
`

type GetTransactionsParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) GetTransactions(ctx context.Context, arg GetTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getTransactions, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CategoryID,
			&i.BudgetID,
			&i.EventID,
			&i.ExcTime,
			&i.Description,
			&i.Amount,
			&i.Images,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsByIDs = `-- name: GetTransactionsByIDs :many
SELECT id, created_at, updated_at, category_id, budget_id, event_id, exc_time, description, amount, images FROM transactions WHERE id = ANY($1::UUID[])
`

func (q *Queries) GetTransactionsByIDs(ctx context.Context, dollar_1 []uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getTransactionsByIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CategoryID,
			&i.BudgetID,
			&i.EventID,
			&i.ExcTime,
			&i.Description,
			&i.Amount,
			&i.Images,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setTranMember = `-- name: SetTranMember :exec
INSERT INTO transaction_members (user_id, transaction_id, role)
VALUES ($1, $2, $3)
`

type SetTranMemberParams struct {
	UserID        uuid.UUID `json:"user_id"`
	TransactionID uuid.UUID `json:"transaction_id"`
	Role          TransRole `json:"role"`
}

func (q *Queries) SetTranMember(ctx context.Context, arg SetTranMemberParams) error {
	_, err := q.db.Exec(ctx, setTranMember, arg.UserID, arg.TransactionID, arg.Role)
	return err
}

const unsetTranMembers = `-- name: UnsetTranMembers :exec
DELETE FROM transaction_members 
WHERE transaction_id = $1
`

func (q *Queries) UnsetTranMembers(ctx context.Context, transactionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, unsetTranMembers, transactionID)
	return err
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE transactions
SET updated_at = NOW(),
    category_id = COALESCE($2, category_id),
    budget_id = COALESCE($3, budget_id),
    event_id = COALESCE($4, event_id),
    exc_time = COALESCE($5, exc_time),
    description = COALESCE($6, description),
    amount = COALESCE($7, amount),
    images = COALESCE($8, images)
WHERE id = $1
RETURNING id, created_at, updated_at, category_id, budget_id, event_id, exc_time, description, amount, images
`

type UpdateTransactionParams struct {
	ID          uuid.UUID      `json:"id"`
	CategoryID  uuid.NullUUID  `json:"category_id"`
	BudgetID    uuid.NullUUID  `json:"budget_id"`
	EventID     uuid.NullUUID  `json:"event_id"`
	ExcTime     *time.Time     `json:"exc_time"`
	Description *string        `json:"description"`
	Amount      pgtype.Numeric `json:"amount"`
	Images      []string       `json:"images"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, updateTransaction,
		arg.ID,
		arg.CategoryID,
		arg.BudgetID,
		arg.EventID,
		arg.ExcTime,
		arg.Description,
		arg.Amount,
		arg.Images,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CategoryID,
		&i.BudgetID,
		&i.EventID,
		&i.ExcTime,
		&i.Description,
		&i.Amount,
		&i.Images,
	)
	return i, err
}
