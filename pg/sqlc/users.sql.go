// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: users.sql

package pg

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (last_join_at, username, hashed_password, email, phone)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, deleted_at, last_join_at, username, hashed_password, email, phone
`

type CreateUserParams struct {
	LastJoinAt     time.Time `json:"last_join_at"`
	Username       string    `json:"username"`
	HashedPassword string    `json:"hashed_password"`
	Email          *string   `json:"email"`
	Phone          *string   `json:"phone"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.LastJoinAt,
		arg.Username,
		arg.HashedPassword,
		arg.Email,
		arg.Phone,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.LastJoinAt,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.Phone,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users SET deleted_at = NOW() WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, deleted_at, last_join_at, username, hashed_password, email, phone FROM users WHERE email = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserByEmail(ctx context.Context, email *string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.LastJoinAt,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.Phone,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, created_at, updated_at, deleted_at, last_join_at, username, hashed_password, email, phone FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.LastJoinAt,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.Phone,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, created_at, updated_at, deleted_at, last_join_at, username, hashed_password, email, phone FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.LastJoinAt,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.Phone,
	)
	return i, err
}

const getUsersByIDs = `-- name: GetUsersByIDs :many
SELECT id, created_at, updated_at, deleted_at, last_join_at, username, hashed_password, email, phone FROM users WHERE id = ANY($1::UUID[])
`

func (q *Queries) GetUsersByIDs(ctx context.Context, dollar_1 []uuid.UUID) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersByIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.LastJoinAt,
			&i.Username,
			&i.HashedPassword,
			&i.Email,
			&i.Phone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET updated_at = NOW(),
    last_join_at = COALESCE($2, last_join_at),
    username = COALESCE($3, username),
    hashed_password = COALESCE($4, hashed_password),
    email = COALESCE($5, email),
    phone = COALESCE($6, phone)
WHERE id = $1 
RETURNING id, created_at, updated_at, deleted_at, last_join_at, username, hashed_password, email, phone
`

type UpdateUserParams struct {
	ID             uuid.UUID  `json:"id"`
	LastJoinAt     *time.Time `json:"last_join_at"`
	Username       *string    `json:"username"`
	HashedPassword *string    `json:"hashed_password"`
	Email          *string    `json:"email"`
	Phone          *string    `json:"phone"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.LastJoinAt,
		arg.Username,
		arg.HashedPassword,
		arg.Email,
		arg.Phone,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.LastJoinAt,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.Phone,
	)
	return i, err
}
