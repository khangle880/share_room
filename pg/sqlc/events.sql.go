// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: events.sql

package pg

import (
	"context"

	"github.com/google/uuid"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (name, description, icon_id, background)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at, name, description, icon_id, background
`

type CreateEventParams struct {
	Name        string    `json:"name"`
	Description string    `json:"description"`
	IconID      uuid.UUID `json:"icon_id"`
	Background  string    `json:"background"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.Name,
		arg.Description,
		arg.IconID,
		arg.Background,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.IconID,
		&i.Background,
	)
	return i, err
}

const getEventByID = `-- name: GetEventByID :one
SELECT id, created_at, updated_at, name, description, icon_id, background FROM events WHERE id = $1
`

func (q *Queries) GetEventByID(ctx context.Context, id uuid.UUID) (Event, error) {
	row := q.db.QueryRow(ctx, getEventByID, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.IconID,
		&i.Background,
	)
	return i, err
}

const getEventsByIDs = `-- name: GetEventsByIDs :many
SELECT id, created_at, updated_at, name, description, icon_id, background FROM events WHERE id = ANY($1::UUID[])
`

func (q *Queries) GetEventsByIDs(ctx context.Context, dollar_1 []uuid.UUID) ([]Event, error) {
	rows, err := q.db.Query(ctx, getEventsByIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.IconID,
			&i.Background,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
