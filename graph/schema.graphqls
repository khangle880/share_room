# GraphQL schema example
#
# https://gqlgen.com/getting-started/
# new directive
directive @auth on FIELD_DEFINITION
directive @hasRole(role: UserRole!) on FIELD_DEFINITION

enum UserRole {admin user}
enum RoomRole {admin member}
enum TaskRole {assignee reviewer creator}
enum TransRole {creator partner}
enum BudgetRole {owner contributor}
enum PeriodType {weekly monthly yearly}
enum StatusType {pending in_progress completed}
enum CategoryType {expense income}

scalar Time
scalar UUID

type Token{
  accessToken: String,
  refreshToken: String,
  user: User
}

"""
Budget type definition
"""
type Budget {
  id: UUID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  name: String!
  description: String
  amount: Float!
  icon: Icon!
  room: Room
  period: PeriodType
  startDate: Time!
  end_date: Time
  transactions: [Transaction!]!
  members: [User!]!
}
"""
Room type definition
"""
type Room {
  id: UUID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  name: String!
  address: String
  admin: User!
  member: [User!]!
  avatar: String
  background: String
}
"""
Transaction type definition
"""
type Transaction {
  id: UUID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  category: Category!
  budget: Budget!
  event: Event
  description: String
  excTime: Time!
  creators: [User!]!
  partners: [User!]
  amount: Float!
  images: [String!]
}
"""
Event type definition
"""
type Event {
  id: UUID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  name: String!
  description: String!
  icon: Icon!
  background: String
}
"""
Category type definition
"""
type Category {
  id: UUID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  name: String!
  type: CategoryType!
  icon: Icon!
  parent: Category
}
"""
Icon type definition
"""
type Icon {
  id: UUID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  name: String!
  url: String!
  type: String
}
"""
User type definition
"""
type User {
  id: UUID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  lastLoginAt: Time!
  username: String!
  hashedPassword: String!
  email: String!
}

"""
Profile type definition
"""
type Profile {
  id: UUID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  role: UserRole!
  firstname: String
  lastname: String
  dob: Time
  bio: String
  avatar: String
  phone: String
}
"""
Query Input
"""
input BudgetFilter {
  name: String
  description: String
}

"""
Query
"""
type Query {
  users(role: UserRole!): [User!]!
  # categories(
  #   filter: BudgetFilter
  #   limit: Int = 10
  #   offset: Int = 0
  # ): [Category!]!
  # budgets: [Budget!]! @auth
}

type Mutation {
  login(email: String!, password: String!): Token!
  register(input: CreateUserInput!): Token!
  # createIcon(input: CreateIconInput!): Icon!
  # createEvent(input: CreateEventInput!): Event!
  # createCategory(input: CreateCategoryInput!): Category!
  # createBudget(input: CreateBudgetInput!): Budget! @auth
  # createTransaction(input: CreateTransInput!): Transaction!
  # updateBudget(id: UUID!, input: UpdateBudgetInput!): Budget!
  # deleteBudget(id: UUID!): Boolean! 
  # deleteUser(id: UUID!): Boolean! @hasRole(role: ADMIN)
}

"""
Input
"""
input CreateUserInput {
  username: String!
  password: String!
  email: String!
  phone: String
  firstname: String
  lastname: String
  role: UserRole = USER
  bio: String
  avatar: String
}

input UpdateUserInput {
  username: String
  password: String
  email: String!
  phone: String
  firstname: String
  lastname: String
  role: UserRole = USER
  bio: String
  avatar: String
}

input CreateIconInput {
  name: String!
  url: String!
}

input CreateCategoryInput {
  name: String!
  type: CategoryType!
  iconID: UUID!
  parentID: UUID
}

input CreateEventInput {
  name: String!
  description: String!
  iconID: UUID!
  background: String
}

input CreateBudgetInput {
  name: String!
  description: String
  Amount: Float!
  iconID: UUID!
  roomID: UUID
  memberIDs: [UUID!]
}

input UpdateBudgetInput {
  name: String
  description: String
  Amount: Float
  iconID: UUID
  roomID: UUID
  memberIDs: [UUID!]
}

input CreateTransInput {
  CategoryID: UUID!
  description: String
  time: Time!
  budgetID: UUID!
  creatorIDs: [UUID!]!
  partnerIDs: [UUID!]
  eventID: UUID
  images: [String!]
}