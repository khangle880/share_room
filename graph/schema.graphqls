# GraphQL schema example
#
# https://gqlgen.com/getting-started/
# new directive
directive @auth on FIELD_DEFINITION
directive @hasRole(role: UserRole!) on FIELD_DEFINITION

enum UserRole {
  admin
  user
}
enum RoomRole {
  admin
  member
}
enum TaskRole {
  assignee
  reviewer
  creator
}
enum TransRole {
  creator
  partner
}
enum BudgetRole {
  owner
  contributor
}
enum PeriodType {
  weekly
  monthly
  yearly
}
enum StatusType {
  pending
  in_progress
  completed
}
enum CategoryType {
  expense
  income
}

scalar Time
scalar UUID

type Token {
  accessToken: String
  refreshToken: String
  user: User
}

"""
Budget type definition
"""
type Budget {
  id: UUID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  description: String
  amount: Float!
  icon: Icon!
  room: Room
  period: PeriodType
  startDate: Time!
  end_date: Time
  transactions: [Transaction!]!
  members: [User!]!
}
"""
Room type definition
"""
type Room {
  id: UUID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  address: String
  admin: User!
  members: [User!]!
  avatar: String
  background: String
}
"""
Transaction type definition
"""
type Transaction {
  id: UUID!
  createdAt: Time!
  updatedAt: Time!
  category: Category!
  budget: Budget!
  event: Event
  description: String
  excTime: Time!
  creators: [User!]!
  partners: [User!]
  amount: Float!
  images: [String!]
}
"""
Event type definition
"""
type Event {
  id: UUID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  description: String!
  icon: Icon!
  background: String
}
"""
Category type definition
"""
type Category {
  id: UUID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  type: CategoryType!
  icon: Icon!
  parent: Category
}
"""
Icon type definition
"""
type Icon {
  id: UUID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  url: String!
  type: String
}
"""
User type definition
"""
type User {
  id: UUID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  lastJoinAt: Time!
  username: String!
  hashedPassword: String!
  email: String
  phone: String
  profile: Profile!
}

"""
Profile type definition
"""
type Profile {
  id: UUID!
  createdAt: Time!
  updatedAt: Time!
  role: UserRole!
  firstname: String
  lastname: String
  dob: Time
  bio: String
  avatar: String
}
"""
Query Input
"""
input BudgetFilter {
  name: String
  description: String
}

"""
Query
"""
type Query {
  profile: User!
  # users(role: UserRole!): [User!]! @auth
  categories(limit: Int = 10, offset: Int = 0): [Category!]!
  budgets(limit: Int = 10, offset: Int = 0): [Budget!]! @auth
}

type Mutation {
  login(email: String!, password: String!): Token!
  register(input: CreateUserInput!): Token!
  updateAccount(input: UpdateAccountInput!): Token! @auth
  updateProfile(input: UpdateProfileInput!): Profile! @auth
  deleteAccount: Boolean! @auth
  createIcon(input: CreateIconInput!): Icon! @hasRole(role: ADMIN)
  createEvent(input: CreateEventInput!): Event! @hasRole(role: ADMIN)
  createCategory(input: CreateCategoryInput!): Category! @hasRole(role: ADMIN)
  createRoom(input: CreateRoomInput!): Room!
  updateRoom(id: UUID!, input: UpdateRoomInput!): Room!
  createTransaction(input: CreateTranInput!): Transaction!
  updateTransaction(id: UUID!, input: UpdateTranInput!): Transaction!
  deleteTransaction(id: UUID!): Boolean!
  createBudget(input: CreateBudgetInput!): Budget! @auth
  updateBudget(id: UUID!, input: UpdateBudgetInput!): Budget!
  deleteBudget(id: UUID!): Boolean!
  deleteUser(id: UUID!): Boolean! @hasRole(role: ADMIN)
}

"""
Input
"""
input CreateUserInput {
  username: String!
  password: String!
  email: String
  phone: String
  firstname: String
  lastname: String
  role: UserRole = USER
  bio: String
  avatar: String
}

input UpdateAccountInput {
  username: String
  password: String
  email: String
  phone: String
}

input UpdateProfileInput {
  firstname: String
  lastname: String
  role: UserRole
  dob: Time
  bio: String
  avatar: String
}

input CreateIconInput {
  name: String!
  url: String!
}

input CreateCategoryInput {
  name: String!
  type: CategoryType!
  iconID: UUID!
  parentID: UUID
}

input CreateEventInput {
  name: String!
  description: String!
  iconID: UUID!
  background: String
}

input BudgetMemberInput {
  id: UUID!
  role: BudgetRole!
}

input CreateBudgetInput {
  name: String!
  description: String
  Amount: Float!
  iconID: UUID!
  roomID: UUID
  period: PeriodType
  startDate: Time!
  end_date: Time
  memberIDs: [BudgetMemberInput!]
}

input UpdateBudgetInput {
  name: String
  description: String
  Amount: Float
  iconID: UUID
  roomID: UUID
  period: PeriodType
  startDate: Time
  end_date: Time
  memberIDs: [BudgetMemberInput!]
}

input CreateTranInput {
  categoryID: UUID!
  description: String
  excTime: Time!
  budgetID: UUID
  Amount: Float!
  creatorIDs: [UUID!]!
  partnerIDs: [UUID!]
  eventID: UUID
  images: [String!]
}

input UpdateTranInput {
  categoryID: UUID
  description: String
  excTime: Time
  budgetID: UUID
  Amount: Float
  creatorIDs: [UUID!]
  partnerIDs: [UUID!]
  eventID: UUID
  images: [String!]
}

input CreateRoomInput {
  name: String!
  address: String!
  adminID: UUID!
  members: [UUID!]!
  avatar: String
  background: String
}

input UpdateRoomInput {
  name: String
  address: String
  adminID: UUID
  members: [UUID!]
  avatar: String
  background: String
}
